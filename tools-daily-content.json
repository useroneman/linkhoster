{
  "hero-tool-1": {
    "title": "Bash Example",
    "description": "Click the button below to copy the Bash script.",
    "code": [
      "def bruteforce(target_password):",
      "    characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{};':,./<>?\"",
      "    password_length = len(target_password)",
      "",
      "    for i in range(password_length):",
      "        for char in characters:",
      "            if char == target_password[i]:",
      "                print(f\"Password found: {char}\")",
      "                break",
      "            else:",
      "                print(f\"Trying: {char}\")",
      "",
      "# Usage guide and examples",
      "print(\"Bruteforce Password Cracker\")",
      "print(\"Usage:\")",
      "print(\"   python bruteforce.py <target_password>\")",
      "print(\"Examples:\")",
      "print(\"   python bruteforce.py abc123\")",
      "print(\"   python bruteforce.py password123\")",
      "print(\"   python bruteforce.py !@#$%^&*()\")",
      "",
      "# Test the script with different target passwords",
      "target_password = \"password123\"",
      "bruteforce(target_password)"
    ],
    "additionalInfo": "This is a basic brute force password cracker in Python. It demonstrates how a script can attempt to guess a target password by checking each character."
  },
  "hero-tool-2": {
    "title": "Network and Port Scanner",
    "description": "This script uses the nmap library to scan the network for live hosts and then performs a port scan on each host.",
    "code": [
      "import nmap",
      "import socket",
      "",
      "def scan_network(network_prefix):",
      "    nm = nmap.PortScanner()",
      "    nm.scan(hosts=f\"{network_prefix}.0/24\", arguments=\"-sP\")",
      "    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]",
      "    return hosts_list",
      "",
      "def port_scan(host, ports):",
      "    nm = nmap.PortScanner()",
      "    nm.scan(host, ports=ports)",
      "    return nm[host]['tcp']",
      "",
      "# Example usage",
      "network_prefix = \"192.168.1\"",
      "hosts = scan_network(network_prefix)",
      "print(f\"Found {len(hosts)} hosts:\")",
      "for host, status in hosts:",
      "    print(f\"{host} is {status}\")",
      "",
      "print(\"\\nPerforming port scan on each host...\")",
      "for host, status in hosts:",
      "    if status == \"up\":",
      "        print(f\"\\nScanning {host}:\")",
      "        ports = port_scan(host, \"22,80,443\")",
      "        for port in ports:",
      "            print(f\"Port {port} is {ports[port]['state']}\")"
    ],
    "additionalInfo": "Example output:\n\nFound 5 hosts:\n192.168.1.10 is up\n192.168.1.11 is down\n192.168.1.12 is up\n192.168.1.13 is up\n192.168.1.14 is up\n\nPerforming port scan on each host...\n\nScanning 192.168.1.10:\nPort 22 is open\nPort 80 is closed\nPort 443 is closed\n\nScanning 192.168.1.12:\nPort 22 is closed\nPort 80 is open\nPort 443 is closed\n\nScanning 192.168.1.13:\nPort 22 is closed\nPort 80 is closed\nPort 443 is closed\n\nScanning 192.168.1.14:\nPort 22 is closed\nPort 80 is closed\nPort 443 is closed"
  },
  "wifi-hacker-python": {
    "title": "WiFi Scanner Script",
    "description": "This script will scan the specified WiFi interface for WiFi access points. It captures packets and filters out Beacon frames to extract the BSSID (MAC address) and SSID (network name) of each access point.",
    "code": [
      "from scapy.all import *",
      "",
      "def scan_wifi(interface):",
      "    # Create a PacketList to store the results",
      "    results = PacketList()",
      "    ",
      "    # Send a probe request to the specified interface",
      "    pkts = sniff(iface=interface, prn=lambda x: results.append(x))",
      "    ",
      "    # Return the results",
      "    return results",
      "",
      "interface = \"wlan0\"  # Replace with your WiFi interface",
      "results = scan_wifi(interface)",
      "",
      "    # Check if the packet is a Beacon frame (contains WiFi access point information)",
      "    if pkt.haslayer(Dot11Beacon):",
      "        # Extract the BSSID (MAC address) and SSID (network name)",
      "        bssid = pkt.addr2",
      "        ssid = pkt.info.decode()",
      "        ",
      "        # Print the BSSID and SSID",
      "        print(f\"BSSID: {bssid}, SSID: {ssid}\")"
    ],
    "additionalInfo": "This script uses the scapy library to capture and analyze WiFi packets. The sniff function is used to capture packets on the specified interface, and the Dot11Beacon layer is used to filter out Beacon frames containing access point information. Example output:\n\nBSSID: 00:11:22:33:44:55, SSID: ExampleWiFi\nBSSID: 66:77:88:99:AA:BB, SSID: OtherWiFi"
  },
"Anonphisher": {
    "title": "Anonphisher - Automated Phishing Tool",
    "description": "A phishing tool by AnonyminHack5 that provides 51+ phishing templates and an inbuilt reverse proxy to generate and send phishing links easily.",
    "code": [
      "git clone https://github.com/TermuxHackz/anonphisher",
      "cd anonphisher",
      "bash anonphisher.sh"
    ],
    "additionalInfo": "Anonphisher is a fully automated phishing tool made with pure Bash script. It allows users to phish various websites using pre-built templates and a built-in reverse proxy.\n\nExample usage:\n1. Clone the repository and navigate to the directory.\n2. Run the script and select a phishing template.\n3. Send the generated phishing link to the target.\n4. Captured credentials will be displayed in the terminal."
},
"camphish": {
    "title": "Camera Phishing Tool",
    "description": "This tool captures images from the target's front camera or PC webcam by sending a malicious link.",
    "code": [
      "apt-get -y install php openssh git wget",
      "git clone https://github.com/techchipnet/CamPhish",
      "cd CamPhish",
      "bash camphish.sh"
    ],
    "additionalInfo": "Once executed, this script sets up a phishing page to trick the target into allowing webcam access.\n\nExample usage:\n1. Run the script and choose a phishing method.\n2. Send the generated link to the target.\n3. If the target clicks the link and grants access, images will be captured and saved."
    }
}
