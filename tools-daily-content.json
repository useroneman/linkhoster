{
"Seeker": {
    "title": "Seeker - Location Permission Phishing Tool",
    "description": "Seeker is a simple tool that hosts a fake website requesting location permissions, similar to many popular location-based websites. If the target grants permission, their location data is captured.",
    "code": [
        "git clone https://github.com/thewhiteh4t/seeker.git",
        "cd seeker/",
        "chmod +x install.sh",
        "./install.sh"
    ],
    "additionalInfo": "Seeker hosts a fake webpage that requests location permissions from the target. If the target grants the location permission, it captures their geographical data.\n\nExample usage:\n1. Clone the repository and navigate to the directory.\n2. Make the install script executable and run it.\n3. The tool sets up a server hosting the fake location request page.\n4. Once the target grants location permission, their location is captured."
},
"Brutex": {
    "title": "BruteX - Automated Brute Force Tool",
    "description": "BruteX is an automated brute force tool that targets and attempts to crack passwords for all services running on a given target system.",
    "code": [
        "apt update",
        "apt upgrade",
        "apt install git -y",
        "git clone https://github.com/1N3/BruteX.git",
        "cd BruteX",
        "./install.sh"
    ],
    "additionalInfo": "BruteX automatically brute forces all services running on the target machine by attempting password cracking on exposed services.\n\nExample usage:\n1. Update and upgrade the system packages.\n2. Install git and clone the BruteX repository.\n3. Navigate to the BruteX directory and install the required dependencies.\n4. Run BruteX against a target system by specifying the target's IP and port.\n5. BruteX will attempt to crack passwords for all detected services."
},
  "wifi-hacker-python": {
    "title": "WiFi Scanner Script",
    "description": "This script will scan the specified WiFi interface for WiFi access points. It captures packets and filters out Beacon frames to extract the BSSID (MAC address) and SSID (network name) of each access point.",
    "code": [
      "from scapy.all import *",
      "",
      "def scan_wifi(interface):",
      "    # Create a PacketList to store the results",
      "    results = PacketList()",
      "    ",
      "    # Send a probe request to the specified interface",
      "    pkts = sniff(iface=interface, prn=lambda x: results.append(x))",
      "    ",
      "    # Return the results",
      "    return results",
      "",
      "interface = \"wlan0\"  # Replace with your WiFi interface",
      "results = scan_wifi(interface)",
      "",
      "    # Check if the packet is a Beacon frame (contains WiFi access point information)",
      "    if pkt.haslayer(Dot11Beacon):",
      "        # Extract the BSSID (MAC address) and SSID (network name)",
      "        bssid = pkt.addr2",
      "        ssid = pkt.info.decode()",
      "        ",
      "        # Print the BSSID and SSID",
      "        print(f\"BSSID: {bssid}, SSID: {ssid}\")"
    ],
    "additionalInfo": "This script uses the scapy library to capture and analyze WiFi packets. The sniff function is used to capture packets on the specified interface, and the Dot11Beacon layer is used to filter out Beacon frames containing access point information. Example output:\n\nBSSID: 00:11:22:33:44:55, SSID: ExampleWiFi\nBSSID: 66:77:88:99:AA:BB, SSID: OtherWiFi"
  },
"Anonphisher": {
    "title": "Anonphisher - Automated Phishing Tool",
    "description": "A phishing tool by AnonyminHack5 that provides 51+ phishing templates and an inbuilt reverse proxy to generate and send phishing links easily.",
    "code": [
      "git clone https://github.com/TermuxHackz/anonphisher",
      "cd anonphisher",
      "bash anonphisher.sh"
    ],
    "additionalInfo": "Anonphisher is a fully automated phishing tool made with pure Bash script. It allows users to phish various websites using pre-built templates and a built-in reverse proxy.\n\nExample usage:\n1. Clone the repository and navigate to the directory.\n2. Run the script and select a phishing template.\n3. Send the generated phishing link to the target.\n4. Captured credentials will be displayed in the terminal."
},
"camphish": {
    "title": "Camera Phishing Tool",
    "description": "This tool captures images from the target's front camera or PC webcam by sending a malicious link.",
    "code": [
      "apt-get -y install php openssh git wget",
      "git clone https://github.com/techchipnet/CamPhish",
      "cd CamPhish",
      "bash camphish.sh"
    ],
    "additionalInfo": "Once executed, this script sets up a phishing page to trick the target into allowing webcam access.\n\nExample usage:\n1. Run the script and choose a phishing method.\n2. Send the generated link to the target.\n3. If the target clicks the link and grants access, images will be captured and saved."
    }
}
